Data: 27/04/2017

1. Crie dois processos, e faça com que o processo-filho gere uma onda quadrada, enquanto o processo-pai faz polling de um botão no GPIO, aumentando a frequência da onda sempre que o botão for pressionado. A frequência da onda quadrada deve começar em 1 Hz, e dobrar cada vez que o botão for pressionado. A frequência máxima é de 64 Hz, devendo retornar a 1 Hz se o botão for pressionado novamente.

/////////////////////////////////////
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <time.h>
#include <sys/types.h>

int fd;
int fp[2];

void fechar(){
	close(fd);
	fd = open("/sys/class/gpio/unexport",O_WRONLY);
	write(fd,"20",2);
	write(fd,"21",2);
	close(fd);
	printf("Fechando programa\n");
	sleep(1);
	exit(0);
}


int main(){

	pid_t pid_id;

	pipe(fp);

	pid_id = fork();

	signal(SIGINT,fechar);

	if(pid_id == 0){
		//processo filho

		int bf = 1;

		//Setando como export
		printf("Realizando o export 20\n");
		fd = open("/sys/class/gpio/export",O_WRONLY);
		write(fd,"20",2);
		close(fd);

		//Setando como saída
		printf("Iniciando o pin 20 como saída\n");
		fd = open("/sys/class/gpio/gpio20/direction",O_WRONLY);
		write(fd,"out",4);
		close(fd);


		fd = open("/sys/class/gpio/gpio20/value",O_WRONLY);
		printf("Iniciando o blink em 20\n");
		while(1){
			read(fp[0],&bf,sizeof(int));
			printf("F = %d\n",500000/bf);
			write(fd,"1",2);
			usleep(500000/bf);
			write(fd,"0",2);
			usleep(500000/bf);
		}
	}

	else{

		//processo pai
		int bp = 1;
		char btn;
		int bp_pass;

		//Setando como export
		printf("Realizando o export 21\n");
		fd = open("/sys/class/gpio/export",O_WRONLY);
		write(fd,"21",2);
		close(fd);

		//Setando como saída
		printf("Iniciando o pin como saída 21\n");
		fd = open("/sys/class/gpio/gpio21/direction",O_WRONLY);
		write(fd,"in",4);
		close(fd);

		fd = open("/sys/class/gpio/gpio21/value",O_RDWR);
		printf("Pronto para capturar gpio21\n");
		while(1){
			lseek(fd,0,SEEK_SET);
			read(fd,&btn,2);
			printf("Freq = %d BTN = %c\n",bp,btn);
			if(btn == '1'){
				bp = 2*bp;
				if(bp == 128) bp=1;
			}
			bp_pass = bp;
			write(fp[1],&bp_pass,sizeof(bp));
			usleep(500000);
		}

	}

	return 0;
}
//////////////////////////////////////////////////

POLLING

#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <time.h>
#include <sys/types.h>
#include <sys/poll.h>

int fd;

void fechar(){
	close(fd);
	fd = open("/sys/class/gpio/unexport",O_WRONLY);
	write(fd,"21",2);
	close(fd);
	printf("Fechando programa\n");
	sleep(1);
	exit(0);
}


int main(){

	struct pollfd pfd;
	char buffer;
	int btn = 1;

	signal(SIGINT,fechar);

	//export pino 21
	fd = open("/sys/class/gpio/export",O_WRONLY);
	write(fd,"21",2);
	close(fd);
	puts("Definindo export...");

	//edge pino 21
	fd = open("/sys/class/gpio/gpio21/edge",O_WRONLY);
	write(fd,"falling",7);
	close(fd);
	puts("Definindo edge...");

	//direction pino 21
	fd = open("/sys/class/gpio/gpio21/direction",O_WRONLY);
	write(fd,"in",2);
	close(fd);
	puts("Definindo direction...");

	//abrindo valor do pino 21
	pfd.fd = open("/sys/class/gpio/gpio21/value",O_RDONLY);
	if(pfd.fd < 0){printf("Error"); exit(1);}
	puts("Definindo value...");

	//eventos revents do pino 21
	pfd.events = POLLPRI | POLLERR;
	pfd.revents = 0;

	//programa
	printf("Aumentando a frequencia por borta de descida...\n");
	while(1)
	{
		printf("Frequência = %d\n",btn);
		lseek(pfd.fd, 0, SEEK_SET);
		read(pfd.fd, &buffer, 1);
		poll(&pfd, 1, -1);
		btn = 2*btn;
		if(btn == 128) btn=1;
		usleep(100000);
	}


	return 0;
}
////////////////////////////






